# Todo Entity Definition
entity: Todo
table: todos
idField: id

# Database columns
columns:
  - logical: id
    physical: id
    primaryKey: true
    autoIncrement: true
    type: integer
    comment: Unique identifier for the todo item

  - logical: title
    physical: title
    type: string
    nullable: false
    comment: Todo item title

  - logical: description
    physical: description
    type: string
    nullable: true
    comment: Optional detailed description of the todo item

  - logical: completed
    physical: completed
    type: boolean
    nullable: false
    comment: Whether the todo item is completed

  - logical: due_date
    physical: due_date
    type: datetime
    nullable: true
    comment: Optional due date for the todo item

  - logical: priority
    physical: priority
    type: integer
    nullable: false
    comment: Priority level (1-5, where 5 is highest)

  - logical: user_id
    physical: user_id
    type: integer
    nullable: false
    comment: ID of the user who owns this todo item
    foreignKey: users.id

  - logical: category
    physical: category
    type: string
    nullable: true
    comment: Optional category for the todo item

  - logical: tags
    physical: tags
    type: string
    nullable: true
    comment: Comma-separated list of tags

  - logical: created_at
    physical: created_at
    type: datetime
    nullable: false
    comment: When the todo item was created

  - logical: updated_at
    physical: updated_at
    type: datetime
    nullable: true
    comment: When the todo item was last updated

# Entity relationships
relations:
  - name: user
    type: manyToOne
    sourceEntity: Todo
    targetEntity: User
    sourceColumn: user_id
    targetColumn: id

# Automatic timestamps
timestamps:
  createdAt: created_at
  updatedAt: updated_at

# REST API configuration
api:
  exposed: true
  basePath: /api/todos
  operations:
    getAll: true
    getById: true
    create: true
    update: true
    delete: true

  # Role-based permissions
  permissions:
    getAll: [user, admin]
    getById: [user, admin]
    create: [user, admin]
    update: [user, admin]
    delete: [user, admin]

  # Field-level access control
  fields:
    user_id:
      read: [user, admin]
      write: [admin]

  # Record-level access control
  recordAccess:
    condition: "user_id = :currentUserId OR :currentUserRole = 'admin'"

# Validation rules
validation:
  rules:
    title:
      - type: required
        message: Title is required
      - type: maxLength
        value: 100
        message: Title cannot exceed 100 characters

    priority:
      - type: required
        message: Priority is required
      - type: min
        value: 1
        message: Priority must be at least 1
      - type: max
        value: 5
        message: Priority cannot exceed 5

    due_date:
      - type: custom
        implementation: |
          (value) => {
            if (!value) return true;
            const dueDate = new Date(value);
            return !isNaN(dueDate.getTime());
          }
        message: Due date must be a valid date

# Computed properties
computed:
  - name: isOverdue
    dependencies: [due_date, completed]
    implementation: |
      (todo) => {
        if (!todo.due_date || todo.completed) return false;
        const dueDate = new Date(todo.due_date);
        return dueDate < new Date();
      }

  - name: formattedDueDate
    dependencies: [due_date]
    implementation: |
      (todo) => {
        if (!todo.due_date) return 'No due date';
        return new Date(todo.due_date).toLocaleDateString();
      }

  - name: tagList
    dependencies: [tags]
    implementation: |
      (todo) => {
        if (!todo.tags) return [];
        return todo.tags.split(',').map(tag => tag.trim()).filter(tag => tag);
      }

# Lifecycle hooks
hooks:
  beforeCreate:
    - name: setDefaultPriority
      implementation: |
        async (entity) => {
          if (!entity.priority) {
            entity.priority = 3; // Default to medium priority
          }
          return entity;
        }

  afterCreate:
    - name: logCreation
      implementation: |
        async (entity, context) => {
          context.logger.info(`Todo created: ${entity.title}`);
          return entity;
        }

  beforeUpdate:
    - name: validatePriorityChange
      implementation: |
        async (params, context) => {
          const { id, data } = params;
          // Only allow priority changes for non-completed items
          if (data.priority && data.completed) {
            const existingTodo = await context.entityDao.findById(id);
            if (existingTodo && existingTodo.completed) {
              data.priority = existingTodo.priority;
            }
          }
          return params;
        }

  afterUpdate:
    - name: notifyOnCompletion
      condition: "params.data.completed === true"
      implementation: |
        async (params, context) => {
          const { id } = params;
          const todo = await context.entityDao.findById(id);
          if (todo && todo.completed) {
            // In a real app, this would send a notification
            context.logger.info(`Todo completed: ${todo.title}`);
          }
          return params;
        }

# Custom actions beyond CRUD
actions:
  - name: markAllCompleted
    path: "/complete-all"
    method: "POST"
    auth: [user, admin]
    implementation: |
      async (req, context) => {
        const { user_id } = req.body;
        
        // Require user_id parameter
        if (!user_id) {
          return { status: 400, message: "Missing user_id parameter" };
        }
        
        // Check authorization
        if (req.user.role !== 'admin' && req.user.id !== user_id) {
          return { status: 403, message: "Unauthorized" };
        }
        
        // Update all todos for the user
        const result = await context.entityDao.updateBy(
          { user_id, completed: false },
          { completed: true }
        );
        
        return { 
          status: 200, 
          message: `Marked ${result} todo items as completed`,
          count: result
        };
      }

  - name: getTodoStats
    path: "/stats"
    method: "GET"
    auth: [user, admin]
    implementation: |
      async (req, context) => {
        const { user_id } = req.query;
        
        // Check authorization
        if (req.user.role !== 'admin' && req.user.id !== parseInt(user_id)) {
          return { status: 403, message: "Unauthorized" };
        }
        
        // Create conditions based on user role
        const conditions = req.user.role === 'admin' && !user_id
          ? {} // Admin can see all stats
          : { user_id: parseInt(user_id) }; // User or admin with user_id specified
        
        // Get todo statistics
        const total = await context.entityDao.count(conditions);
        const completed = await context.entityDao.count({
          ...conditions,
          completed: true
        });
        const overdue = await context.entityDao.executeRawQuery(`
          SELECT COUNT(*) as count 
          FROM todos 
          WHERE completed = 0 
          AND due_date IS NOT NULL 
          AND due_date < datetime('now')
          ${conditions.user_id ? `AND user_id = ${conditions.user_id}` : ''}
        `);
        
        return {
          total,
          completed,
          pending: total - completed,
          overdue: overdue[0]?.count || 0,
          completion_rate: total > 0 ? Math.round((completed / total) * 100) : 0
        };
      }
