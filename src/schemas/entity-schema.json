{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Entity Configuration Schema",
	"description": "Schema for entity definitions in YAML configuration",
	"type": "object",
	"required": [
		"entity",
		"table",
		"idField",
		"columns"
	],
	"properties": {
		"entity": {
			"type": "string",
			"description": "Entity name in PascalCase"
		},
		"table": {
			"type": "string",
			"description": "Database table name"
		},
		"idField": {
			"type": "string",
			"description": "Primary key field name"
		},
		"schema": {
			"type": "string",
			"description": "Database schema name"
		},
		"columns": {
			"type": "array",
			"description": "Column definitions",
			"items": {
				"type": "object",
				"required": [
					"logical",
					"physical"
				],
				"properties": {
					"logical": {
						"type": "string",
						"description": "Logical column name (in code)"
					},
					"physical": {
						"type": "string",
						"description": "Physical column name (in database)"
					},
					"primaryKey": {
						"type": "boolean",
						"description": "Whether this is a primary key"
					},
					"autoIncrement": {
						"type": "boolean",
						"description": "Whether the column auto-increments"
					},
					"nullable": {
						"type": "boolean",
						"description": "Whether the column can be null"
					},
					"type": {
						"type": "string",
						"description": "Column data type",
						"enum": [
							"string",
							"integer",
							"number",
							"boolean",
							"date",
							"datetime",
							"time",
							"timestamp",
							"text",
							"json",
							"blob",
							"bigint",
							"smallint",
							"tinyint",
							"decimal",
							"float",
							"double",
							"char",
							"varchar",
							"binary"
						]
					},
					"unique": {
						"type": "boolean",
						"description": "Whether the column has a unique constraint"
					},
					"comment": {
						"type": "string",
						"description": "Column comment"
					},
					"length": {
						"type": "number",
						"description": "Column length (for string types)"
					},
					"precision": {
						"type": "number",
						"description": "Column precision (for numeric types)"
					},
					"scale": {
						"type": "number",
						"description": "Column scale (for numeric types)"
					},
					"index": {
						"oneOf": [
							{
								"type": "boolean"
							},
							{
								"type": "string"
							}
						],
						"description": "Whether this column should be indexed or index name"
					},
					"foreignKey": {
						"type": "string",
						"description": "Foreign key reference (table.column)"
					},
					"managedTimestamp": {
						"type": "string",
						"enum": [
							"create",
							"update",
							"delete"
						],
						"description": "Whether this column is a timestamp managed by the ORM"
					},
					"defaultValue": {
						"description": "Default value for the column"
					},
					"options": {
						"type": "object",
						"description": "Custom database-specific options",
						"additionalProperties": true
					},
					"api": {
						"type": "object",
						"description": "API-specific settings for this column",
						"properties": {
							"readable": {
								"type": "boolean",
								"description": "Whether this field is readable through the API"
							},
							"writable": {
								"type": "boolean",
								"description": "Whether this field is writable through the API"
							},
							"roles": {
								"type": "object",
								"properties": {
									"read": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "Roles that can read this field"
									},
									"write": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"description": "Roles that can write this field"
									}
								}
							}
						}
					}
				}
			}
		},
		"relations": {
			"type": "array",
			"description": "Relationship definitions",
			"items": {
				"type": "object",
				"required": [
					"name",
					"type",
					"sourceEntity",
					"targetEntity",
					"sourceColumn",
					"targetColumn"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "Relation name"
					},
					"type": {
						"type": "string",
						"enum": [
							"oneToOne",
							"oneToMany",
							"manyToOne",
							"manyToMany"
						],
						"description": "Relation type"
					},
					"sourceEntity": {
						"type": "string",
						"description": "Source entity"
					},
					"targetEntity": {
						"type": "string",
						"description": "Target entity"
					},
					"sourceColumn": {
						"type": "string",
						"description": "Source column"
					},
					"targetColumn": {
						"type": "string",
						"description": "Target column"
					},
					"junctionTable": {
						"type": "string",
						"description": "For many-to-many, junction table"
					},
					"junctionSourceColumn": {
						"type": "string",
						"description": "For many-to-many, junction source column"
					},
					"junctionTargetColumn": {
						"type": "string",
						"description": "For many-to-many, junction target column"
					},
					"isOwner": {
						"type": "boolean",
						"description": "For one-to-one, whether this is the owner side"
					},
					"inverseName": {
						"type": "string",
						"description": "Inverse relation name"
					}
				},
				"allOf": [
					{
						"if": {
							"properties": {
								"type": {
									"enum": [
										"manyToMany"
									]
								}
							}
						},
						"then": {
							"required": [
								"junctionTable",
								"junctionSourceColumn",
								"junctionTargetColumn"
							]
						}
					}
				]
			}
		},
		"indexes": {
			"type": "array",
			"description": "Table indexes",
			"items": {
				"type": "object",
				"required": [
					"name",
					"columns"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "Index name"
					},
					"columns": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Columns included in the index (logical names)"
					},
					"unique": {
						"type": "boolean",
						"description": "Whether this is a unique index"
					},
					"type": {
						"type": "string",
						"description": "Index type (database-specific)"
					},
					"fulltext": {
						"type": "boolean",
						"description": "Whether this is a fulltext index"
					},
					"spatial": {
						"type": "boolean",
						"description": "Whether this is a spatial index"
					},
					"where": {
						"type": "string",
						"description": "Where condition for partial indexes (database-specific)"
					}
				}
			}
		},
		"timestamps": {
			"type": "object",
			"description": "Timestamp column configuration",
			"properties": {
				"createdAt": {
					"type": "string",
					"description": "Created at column name"
				},
				"updatedAt": {
					"type": "string",
					"description": "Updated at column name"
				},
				"deletedAt": {
					"type": "string",
					"description": "Deleted at column name"
				}
			}
		},
		"softDelete": {
			"type": "object",
			"description": "Soft delete configuration",
			"required": [
				"column",
				"deletedValue",
				"nonDeletedValue"
			],
			"properties": {
				"column": {
					"type": "string",
					"description": "Soft delete column name"
				},
				"deletedValue": {
					"description": "Value indicating a deleted record"
				},
				"nonDeletedValue": {
					"description": "Value indicating a non-deleted record"
				}
			}
		},
		"api": {
			"type": "object",
			"description": "API configuration",
			"properties": {
				"exposed": {
					"type": "boolean",
					"description": "Whether to expose entity via REST API"
				},
				"basePath": {
					"type": "string",
					"description": "Base path for the entity API"
				},
				"operations": {
					"type": "object",
					"description": "Enabled API operations",
					"properties": {
						"getAll": {
							"type": "boolean"
						},
						"getById": {
							"type": "boolean"
						},
						"create": {
							"type": "boolean"
						},
						"update": {
							"type": "boolean"
						},
						"delete": {
							"type": "boolean"
						}
					}
				},
				"permissions": {
					"type": "object",
					"description": "Role-based permissions",
					"properties": {
						"getAll": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"getById": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"create": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"update": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"delete": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"fields": {
					"type": "object",
					"description": "Field-level permissions",
					"additionalProperties": {
						"type": "object",
						"properties": {
							"read": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"write": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				},
				"recordAccess": {
					"type": "object",
					"description": "Record-level access control",
					"properties": {
						"ownerField": {
							"type": "string",
							"description": "Field that contains the owner ID"
						},
						"condition": {
							"type": "string",
							"description": "Record-level access control condition"
						}
					}
				},
				"queryParams": {
					"type": "object",
					"description": "Query parameter handling",
					"properties": {
						"filters": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "Parameters for filtering"
						},
						"sort": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "Parameters for sorting"
						},
						"pagination": {
							"type": "boolean",
							"description": "Whether to enable pagination"
						},
						"custom": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							},
							"description": "Custom parameters and their handlers"
						}
					}
				},
				"transformers": {
					"type": "object",
					"description": "Custom response transformers",
					"properties": {
						"getAll": {
							"type": "string",
							"description": "Transform the response after getAll"
						},
						"getById": {
							"type": "string",
							"description": "Transform the response after getById"
						},
						"create": {
							"type": "string",
							"description": "Transform the response after create"
						},
						"update": {
							"type": "string",
							"description": "Transform the response after update"
						},
						"delete": {
							"type": "string",
							"description": "Transform the response after delete"
						}
					}
				}
			}
		},
		"hooks": {
			"type": "object",
			"description": "Entity lifecycle hooks",
			"properties": {
				"beforeCreate": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before creating an entity"
				},
				"afterCreate": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after creating an entity"
				},
				"beforeUpdate": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before updating an entity"
				},
				"afterUpdate": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after updating an entity"
				},
				"beforeDelete": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before deleting an entity"
				},
				"afterDelete": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after deleting an entity"
				},
				"beforeFind": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before finding entities"
				},
				"afterFind": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after finding entities"
				},
				"beforeGetById": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before retrieving a single entity"
				},
				"afterGetById": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after retrieving a single entity"
				},
				"beforeGetAll": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before retrieving multiple entities"
				},
				"afterGetAll": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after retrieving multiple entities"
				},
				"beforeFindBy": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before finding entities by conditions"
				},
				"afterFindBy": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after finding entities by conditions"
				},
				"beforeFindRelated": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before finding related entities"
				},
				"afterFindRelated": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after finding related entities"
				},
				"beforeAction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before performing a custom action"
				},
				"afterAction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after performing a custom action"
				},
				"beforeApi": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed before processing an API request"
				},
				"afterApi": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/hook"
					},
					"description": "Hooks executed after processing an API request"
				}
			}
		},
		"computed": {
			"type": "array",
			"description": "Computed properties",
			"items": {
				"type": "object",
				"required": [
					"name",
					"implementation"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "Property name"
					},
					"dependencies": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Fields this property depends on"
					},
					"implementation": {
						"type": "string",
						"description": "Property implementation or path to external file"
					},
					"cache": {
						"type": "boolean",
						"description": "Whether to cache the computed value"
					},
					"description": {
						"type": "string",
						"description": "Description of the computed property"
					},
					"exposeInApi": {
						"type": "boolean",
						"description": "Whether to expose in API responses"
					}
				}
			}
		},
		"actions": {
			"type": "array",
			"description": "Custom entity actions",
			"items": {
				"type": "object",
				"required": [
					"name",
					"implementation"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "Action name"
					},
					"description": {
						"type": "string",
						"description": "Action description"
					},
					"implementation": {
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "object"
							}
						],
						"description": "Action implementation or path to external file"
					},
					"httpMethod": {
						"type": "string",
						"enum": [
							"GET",
							"POST",
							"PUT",
							"PATCH",
							"DELETE"
						],
						"description": "HTTP method if exposed via API"
					},
					"route": {
						"type": "string",
						"description": "API route path (relative to entity base path)"
					},
					"roles": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Roles allowed to execute this action"
					},
					"parameters": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"name",
								"type"
							],
							"properties": {
								"name": {
									"type": "string",
									"description": "Parameter name"
								},
								"type": {
									"type": "string",
									"enum": [
										"string",
										"number",
										"boolean",
										"object",
										"array"
									],
									"description": "Parameter type"
								},
								"required": {
									"type": "boolean",
									"description": "Whether the parameter is required"
								},
								"description": {
									"type": "string",
									"description": "Parameter description"
								},
								"validation": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/validationRule"
									},
									"description": "Validation rules for this parameter"
								}
							}
						}
					},
					"returns": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"object",
									"array",
									"string",
									"number",
									"boolean",
									"void"
								],
								"description": "Return type"
							},
							"description": {
								"type": "string",
								"description": "Description of the return value"
							}
						}
					},
					"transactional": {
						"type": "boolean",
						"description": "Whether this action requires a transaction"
					},
					"middleware": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Middleware to apply to this action when exposed via API"
					}
				}
			}
		},
		"validation": {
			"type": "object",
			"description": "Validation rules",
			"properties": {
				"rules": {
					"type": "object",
					"additionalProperties": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/validationRule"
						}
					}
				}
			}
		},
		"workflows": {
			"type": "array",
			"description": "Workflow definitions",
			"items": {
				"type": "object",
				"required": [
					"name",
					"states",
					"transitions"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "Workflow name"
					},
					"states": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"name"
							],
							"properties": {
								"name": {
									"type": "string",
									"description": "State name"
								},
								"initial": {
									"type": "boolean",
									"description": "Whether this is the initial state"
								},
								"description": {
									"type": "string",
									"description": "State description"
								},
								"metadata": {
									"type": "object",
									"additionalProperties": true,
									"description": "Additional metadata for the state"
								}
							}
						}
					},
					"transitions": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"from",
								"to",
								"action"
							],
							"properties": {
								"from": {
									"type": "string",
									"description": "Source state"
								},
								"to": {
									"type": "string",
									"description": "Target state"
								},
								"action": {
									"type": "string",
									"description": "Transition action name"
								},
								"permissions": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"description": "Roles that can perform this transition"
								},
								"hooks": {
									"type": "object",
									"properties": {
										"before": {
											"type": "string",
											"description": "Before transition hook"
										},
										"after": {
											"type": "string",
											"description": "After transition hook"
										}
									}
								},
								"description": {
									"type": "string",
									"description": "Transition description"
								},
								"metadata": {
									"type": "object",
									"additionalProperties": true,
									"description": "Additional metadata for the transition"
								}
							}
						}
					}
				}
			}
		},
		"middleware": {
			"type": "object",
			"description": "API-specific middleware configuration",
			"properties": {
				"name": {
					"type": "string",
					"description": "Middleware name"
				},
				"handler": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "object"
						}
					],
					"description": "Middleware handler function or path"
				},
				"options": {
					"type": "object",
					"description": "Middleware options",
					"additionalProperties": true
				},
				"priority": {
					"type": "number",
					"description": "Middleware priority (lower numbers run first)"
				},
				"global": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Global middleware (applied to all routes)"
				},
				"entity": {
					"type": "object",
					"additionalProperties": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"description": "Entity-specific middleware"
				},
				"action": {
					"type": "object",
					"additionalProperties": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"description": "Action-specific middleware"
				},
				"route": {
					"type": "object",
					"additionalProperties": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"description": "Route-specific middleware"
				},
				"method": {
					"type": "object",
					"properties": {
						"get": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"post": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"put": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"delete": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"patch": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"description": "HTTP method-specific middleware"
				},
				"all": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Middleware to apply to all routes"
				}
			}
		},
		"options": {
			"type": "object",
			"description": "Custom database-specific options",
			"additionalProperties": true
		}
	},
	"definitions": {
		"hook": {
			"type": "object",
			"required": [
				"name",
				"implementation"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "Hook name"
				},
				"implementation": {
					"type": "string",
					"description": "Inline implementation or path to external file"
				},
				"condition": {
					"type": "string",
					"description": "Optional condition for hook execution"
				},
				"priority": {
					"type": "number",
					"description": "Hook priority (lower numbers run first)"
				},
				"async": {
					"type": "boolean",
					"description": "Whether the hook should be async"
				},
				"timeout": {
					"type": "number",
					"description": "Maximum execution time in milliseconds"
				}
			}
		},
		"validationRule": {
			"type": "object",
			"required": [
				"type",
				"message"
			],
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"required",
						"minLength",
						"maxLength",
						"min",
						"max",
						"pattern",
						"email",
						"custom"
					],
					"description": "Rule type"
				},
				"value": {
					"description": "Rule value (if applicable)"
				},
				"message": {
					"type": "string",
					"description": "Error message"
				},
				"implementation": {
					"type": "string",
					"description": "Custom implementation (for custom rules)"
				},
				"applyToApi": {
					"type": "boolean",
					"description": "Whether this validation applies to API requests"
				}
			}
		}
	}
}